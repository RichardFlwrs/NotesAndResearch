<?php

namespace App\Entity;

use App\Repository\CartaRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\Mapping\HasLifecycleCallbacks;
use Symfony\Component\Serializer\Annotation\Ignore;

#[ORM\Entity(repositoryClass: CartaRepository::class)]
#[HasLifecycleCallbacks]
class Carta
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(type: 'datetime')]
    private ?\DateTimeInterface $created_at = null;

    #[ORM\Column(type: 'datetime')]
    private ?\DateTimeInterface $updated_at = null;

    /**
     * @var Collection<int, self>
     */
    #[ORM\ManyToMany(targetEntity: self::class)]
    private Collection $asociadas; // table 'carta_carta' on DataBase

    #[ORM\ManyToOne(inversedBy: 'cartas')]
    #[ORM\JoinColumn(nullable: false)]
    private ?Operador $operador = null;

    public function __construct()
    {
        $this->asociadas = new ArrayCollection();
    }

    #[ORM\PrePersist]
    public function setCreatedAt(): void
    {
        $this->created_at = new \DateTimeImmutable();
        $this->setUpdatedAt();
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->created_at;
    }

    public function getUpdatedAt(): ?\DateTimeInterface
    {
        return $this->updated_at;
    }

    #[ORM\PreUpdate]
    public function setUpdatedAt(): void
    {
        $this->updated_at = new \DateTimeImmutable();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getOperador(): ?Operador
    {
        return $this->operador;
    }

    public function setOperador(?Operador $operador): static
    {
        $this->operador = $operador;

        return $this;
    }

    /**
     * @return Collection<int, self>
     */
    #[Ignore]
    public function getAsociadas(): Collection
    {
        return $this->asociadas;
    }

    public function addAsociada(self $asociada): static
    {
        if (!$this->asociadas->contains($asociada)) {
            $this->asociadas->add($asociada);
        }

        return $this;
    }

    public function removeAsociada(self $asociada): static
    {
        $this->asociadas->removeElement($asociada);

        return $this;
    }

    public function clearAsociadas(): void
    {
        $this->asociadas = new ArrayCollection();
    }
}

I have this function that returns Carta->asociadas;

public function AsociadasById($id)
{
    // Whe are using DQL
    $query = $this->getEntityManager()->createQuery(
        'SELECT c2 
            FROM App\Entity\Carta c2 
            JOIN c2.asociadas c1 
            WHERE c1.id = :id'
    );
    $query->setParameter('id', $id);

    return $query->getResult();
}

Using this data sample:
INSERT INTO `carta_carta` (`carta_source`, `carta_target`) VALUES
(89, 91),
(90, 89),
(91, 89);

when I try AsociadasById(89) It returns data with ID's 91 and 90 as Its expected...
when I try AsociadasById(91) It returns data with ID 89 as Its expected...
But when AsociadasById(91) It returns nothing. Its expected to return ID 89

What happend? How to make it work as expected?