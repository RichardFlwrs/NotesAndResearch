// src/domain/entities/Appointment.ts
export class Appointment {
  id: string;
  patientId: string;
  doctorId: string;
  dateTime: Date;
  status: "scheduled" | "cancelled";

  constructor(id: string, patientId: string, doctorId: string, dateTime: Date) {
    this.id = id;
    this.patientId = patientId;
    this.doctorId = doctorId;
    this.dateTime = dateTime;
    this.status = "scheduled";
  }
}

// src/domain/entities/DoctorAvailability.ts
export interface DoctorAvailability {
  isAvailable(dateTime: Date): boolean;
}

// src/domain/repositories/AppointmentRepository.ts
export interface AppointmentRepository {
  save(appointment: Appointment): Promise<void>;
  findDoctorAvailability(doctorId: string): Promise<DoctorAvailability>;
  patientExists(patientId: string): Promise<boolean>;
}

// src/infrastructure/api/AppointmentApiRepository.ts
export class AppointmentApiRepository implements AppointmentRepository {
  private baseUrl = "/api"; // Adjust based on your backend

  async save(appointment: Appointment): Promise<void> {
    const response = await fetch(`${this.baseUrl}/appointments`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        patientId: appointment.patientId,
        doctorId: appointment.doctorId,
        dateTime: appointment.dateTime.toISOString(),
      }),
    });
    if (!response.ok) throw new Error("Failed to save appointment");
  }

  async findDoctorAvailability(doctorId: string): Promise<DoctorAvailability> {
    const response = await fetch(`${this.baseUrl}/doctors/${doctorId}/availability`);
    const data = await response.json();
    return {
      isAvailable: (dateTime: Date) => {
        // Assume API returns { bookedSlots: string[] } in ISO format
        return !data.bookedSlots.includes(dateTime.toISOString());
      },
    };
  }

  async patientExists(patientId: string): Promise<boolean> {
    const response = await fetch(`${this.baseUrl}/patients/${patientId}`);
    return response.ok; // 200 means exists, 404 means not found
  }
}

// src/domain/useCases/ScheduleAppointmentUseCase.ts
export class ScheduleAppointmentUseCase {
  constructor(
    private repository: AppointmentRepository,
    private notificationService: NotificationService
  ) {}

  async execute(patientId: string, doctorId: string, dateTime: Date): Promise<string> {
    const patientExists = await this.repository.patientExists(patientId);
    if (!patientExists) throw new Error("Patient not found");

    const availability = await this.repository.findDoctorAvailability(doctorId);
    if (!availability.isAvailable(dateTime)) throw new Error("Doctor is booked");

    const appointment = new Appointment(
      `appt_${Math.random().toString(36).slice(2)}`,
      patientId,
      doctorId,
      dateTime
    );
    await this.repository.save(appointment);

    await this.notificationService.notifyPatient(
      patientId,
      `Your appointment with Dr. ${doctorId} is set for ${dateTime.toLocaleString()}.`
    );

    return appointment.id;
  }
}

// src/components/ScheduleAppointment.tsx
import React, { useState } from "react";
import { ScheduleAppointmentUseCase } from "../domain/useCases/ScheduleAppointmentUseCase";
import { AppointmentApiRepository } from "../infrastructure/api/AppointmentApiRepository";

// Custom hook to manage use case (could use Context in a larger app)
const useScheduleAppointment = () => {
  const appointmentRepository = new AppointmentApiRepository();
  return new ScheduleAppointmentUseCase(appointmentRepository);
};

interface ScheduleAppointmentProps {
  useCase?: ScheduleAppointmentUseCase; // Optional prop for testing
}

export const ScheduleAppointment: React.FC<ScheduleAppointmentProps> = ({ useCase }) => {
  const scheduleAppointmentUseCase = useCase || useScheduleAppointment(); // Default to hook if no prop
  const [patientId, setPatientId] = useState("");
  const [doctorId, setDoctorId] = useState("");
  const [dateTime, setDateTime] = useState("");
  const [message, setMessage] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setMessage(null);

    try {
      const appointmentId = await scheduleAppointmentUseCase.execute(patientId, doctorId, new Date(dateTime));
      setMessage(`Appointment scheduled successfully! ID: ${appointmentId}`);
      setPatientId("");
      setDoctorId("");
      setDateTime("");
    } catch (error) {
      setMessage(`Error: ${(error as Error).message}`);
    } finally {
      setLoading(false);
    }
  };

  return ( <div> <h2>Schedule an Appointment</h2> <form onSubmit={handleSubmit}> <div> <label> Patient ID: <input type="text" value={patientId} onChange={(e) => setPatientId(e.target.value)} required /> </label> </div> <div> <label> Doctor ID: <input type="text" value={doctorId} onChange={(e) => setDoctorId(e.target.value)} required /> </label> </div> <div> <label> Date & Time: <input type="datetime-local" value={dateTime} onChange={(e) => setDateTime(e.target.value)} required /> </label> </div> <button type="submit" disabled={loading}> {loading ? "Scheduling..." : "Schedule"} </button> </form> {message && <p>{message}</p>} </div> );
};