Learning react.js with a game tutorial from: https://reactjs.org/tutorial/tutorial.html

 We must create a react project with node.js and using the template they provide, you should manage the structure of classes/components for a 'Tic Tac Toe' game. 
 In this example they separate the game in 3 Models; Game, Board and Square. Through the whole tutorial you can see how the main logic scale from the smallest class Square, then the Board and finally the Game class. With this you may understand how components works and how they comunicate each other.
 The tutorial also explain how to add a "history" feature of all the moves you do in the game using immutability. Registering the state every time you do a move.
 

> Create project with npm command:
	npx create-react-app name-project
	
	

> Usefull info:

	+ Components are classes that extend from 'React.Component'.

	+ Using method: render(), to return the template that will display.
	
	+ Inside the template, you will need to use 
		. [props], for all the values you may pass to the component via html-properties.
		
		. [states],	data that may need to be stored for the compoenent. You can cahnge the values with the method: 'setState()'
	.
	+ setState: React will update only the properties mentioned in 'setState' method leaving the remaining state as is.
	
	+ Function Components.- Instead of defining a class which extends React.Component, we can write a function that takes props as input and returns the template
	
	+ 'Keys' (for DOM list) do not need to be globally unique; they only need to be unique between components and their siblings.


> Immutability for 'states' values is very important for:
	+ Detecting changes
	+ Determining When to Re-Render in React

	For this you will need to "clone" the object/array and then do the changes.
	After the modifies, you replace the 'changed' value with the original.
	In that way you can make a track of all the alterations of the value.
	
	note: Unlike the array push() method you might be more familiar with, the concat() method doesnâ€™t mutate the original array, so we prefer it.
  
  
  
